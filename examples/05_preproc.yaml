# XNMT supports various ways to preprocess data as demonstrated in this example.
# Note that some preprocessing functionality relies on third-party tools.
preproc: !Experiment
  exp_global: !ExpGlobal
    # define some named strings that can be used throughout the experiment config:
    placeholders:
      DATA_IN: examples/data/
      DATA_OUT: examples/preproc/
  preproc: !PreprocRunner
    overwrite: False
    tasks:
    - !PreprocTokenize
      in_files:
      - '{DATA_IN}/train.ja'
      - '{DATA_IN}/train.en'
      - '{DATA_IN}/dev.ja'
      - '{DATA_IN}/dev.en'
      - '{DATA_IN}/test.ja'
      - '{DATA_IN}/test.en'
      out_files:
      - '{DATA_OUT}/train.tok.ja'
      - '{DATA_OUT}/train.tok.en'
      - '{DATA_OUT}/dev.tok.ja'
      - '{DATA_OUT}/dev.tok.en'
      - '{DATA_OUT}/test.tok.ja'
      - '{DATA_OUT}/test.tok.en'
      specs:
      - filenum: all
        tokenizers:
        - !UnicodeTokenizer {}
    - !PreprocNormalize
      in_files:
      - '{DATA_OUT}/train.tok.ja'
      - '{DATA_OUT}/train.tok.en'
      - '{DATA_OUT}/dev.tok.ja'
      - '{DATA_OUT}/dev.tok.en'
      - '{DATA_OUT}/test.tok.ja'
      - '{DATA_OUT}/test.tok.en'
      - '{DATA_IN}/dev.en'
      - '{DATA_IN}/test.en'
      out_files:
      - '{DATA_OUT}/train.tok.norm.ja'
      - '{DATA_OUT}/train.tok.norm.en'
      - '{DATA_OUT}/dev.tok.norm.ja'
      - '{DATA_OUT}/dev.tok.norm.en'
      - '{DATA_OUT}/test.tok.norm.ja'
      - '{DATA_OUT}/test.tok.norm.en'
      - '{DATA_OUT}/dev.norm.en'
      - '{DATA_OUT}/test.norm.en'
      specs:
      - filenum: all
        normalizers:
        - !NormalizerLower {}
    - !PreprocFilter
      in_files:
      - '{DATA_OUT}/train.tok.norm.ja'
      - '{DATA_OUT}/train.tok.norm.en'
      out_files:
      - '{DATA_OUT}/train.tok.norm.filter.ja'
      - '{DATA_OUT}/train.tok.norm.filter.en'
      specs:
      - type: length
        min: 1
        max: 60
    - !PreprocVocab
      in_files:
      - '{DATA_OUT}/train.tok.norm.ja'
      - '{DATA_OUT}/train.tok.norm.en'
      out_files:
      - '{DATA_OUT}/train.vocab.ja'
      - '{DATA_OUT}/train.vocab.en'
      specs:
      - filenum: all
        filters:
        - !VocabFiltererFreq
            min_freq: 2
  model: !DefaultTranslator
    src_reader: !PlainTextReader
      vocab: !Vocab
        vocab_file: examples/preproc/train.vocab.ja
    trg_reader: !PlainTextReader
      vocab: !Vocab
        vocab_file: examples/preproc/train.vocab.en
    src_embedder: !SimpleWordEmbedder
      emb_dim: 512
    encoder: !BiLSTMSeqTransducer
      layers: 1
    attender: !MlpAttender
      hidden_dim: 512
      state_dim: 512
      input_dim: 512
    trg_embedder: !SimpleWordEmbedder
      emb_dim: 512
    decoder: !AutoRegressiveDecoder
      rnn: !UniLSTMSeqTransducer
        layers: 1
      transform: !AuxNonLinear
        output_dim: 512
      bridge: !NoBridge {}
    inference: !AutoRegressiveInference
      post_process: join-piece
  train: !SimpleTrainingRegimen
    run_for_epochs: 20
    src_file: '{DATA_OUT}/dev.tok.norm.ja'
    trg_file: '{DATA_OUT}/dev.tok.norm.en'
    dev_tasks:
      - !AccuracyEvalTask
        eval_metrics: bleu
        src_file: '{DATA_OUT}/dev.tok.norm.ja'
        ref_file: '{DATA_OUT}/dev.norm.en'
        hyp_file: examples/output/{EXP}.dev_hyp
      - !LossEvalTask
        src_file: '{DATA_OUT}/dev.tok.norm.ja'
        ref_file: '{DATA_OUT}/dev.tok.norm.en'
  evaluate:
  - !AccuracyEvalTask
    eval_metrics: bleu
    src_file: '{DATA_OUT}/test.tok.norm.ja'
    ref_file: '{DATA_OUT}/test.norm.en'
    hyp_file: examples/output/{EXP}.test_hyp
