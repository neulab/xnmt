"""
This module contains features related to outputs generated by a model.

The main responsibilities are data structures for holding such outputs, and code to translate outputs into readable
strings.
"""

from xnmt.persistence import Serializable, serializable_init

class OutputProcessor(object):
  def process(self, s: str) -> str:
    """
    Produce a string-representation of an output.

    Args:
      s: string to be processed

    Returns:
      post-processed string
    """
    raise NotImplementedError("must be implemented by subclasses")

  @staticmethod
  def get_output_processor(spec):
    if isinstance(spec, str):
      procs = []
      for spec_item in spec.split(","):
        if spec_item == "none":
          continue
        elif spec_item == "join-char":
          procs.append(JoinCharTextOutputProcessor())
        elif spec == "join-bpe":
          procs.append(JoinBpeTextOutputProcessor())
        elif spec == "join-piece":
          procs.append(JoinPieceTextOutputProcessor())
      return procs
    else:
      return spec

class PlainTextOutputProcessor(OutputProcessor, Serializable):
  """
  This output processor does nothing and exists only for backward compatibility.
  # TODO: remove eventually.
  """
  yaml_tag = "!PlainTextOutputProcessor"
  def process(self, s: str) -> str:
    return s

class JoinCharTextOutputProcessor(OutputProcessor, Serializable):
  """
  Assumes a single-character vocabulary and joins them to form words.

  Per default, double underscores '__' are treated as word separating tokens.
  """
  yaml_tag = "!JoinCharTextOutputProcessor"
  @serializable_init
  def __init__(self, space_token="__"):
    self.space_token = space_token

  def process(self, s: str) -> str:
    return s.replace(" ", "").replace(self.space_token, " ")

class JoinBpeTextOutputProcessor(OutputProcessor, Serializable):
  """
  Assumes a bpe-based vocabulary and outputs the merged words.

  Per default, the '@' postfix indicates subwords that should be merged
  """
  yaml_tag = "!JoinBpeTextOutputProcessor"
  @serializable_init
  def __init__(self, merge_indicator="@@"):
    self.merge_indicator_with_space = merge_indicator + " "

  def process(self, s: str) -> str:
    return s.replace(self.merge_indicator_with_space, "")

class JoinPieceTextOutputProcessor(OutputProcessor, Serializable):
  """
  Assumes a sentence-piece vocabulary and joins them to form words.

  Space_token could be the starting character of a piece per default, the u'\u2581' indicates spaces
  """
  yaml_tag = "!JoinPieceTextOutputProcessor"
  @serializable_init
  def __init__(self, space_token="\u2581"):
    self.space_token = space_token

  def process(self, s: str) -> str:
    return s.replace(self.space_token, " ").strip()
